plugins {
    alias libs.plugins.neogradle
    alias libs.plugins.librarian
    alias libs.plugins.mixingradle
}

apply plugin: 'java'
apply plugin: 'maven-publish'

base.archivesName = "${artifact_id}-neoforge-${libs.versions.minecraft.get()}"

minecraft {
    mappings channel: 'parchment', version: "${libs.versions.parchment.minecraft.get()}-${libs.versions.parchment.mappings.get()}-${libs.versions.minecraft.get()}"

    runs {
        client {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Client'
            mods {
                modClientRun {
                    source sourceSets.main
                    source project(":Common").sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('runserver')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Server'
            mods {
                modServerRun {
                    source sourceSets.main
                    source project(":Common").sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            taskName 'Data'
            mods {
                modDataRun {
                    source sourceSets.main
                    source project(":Common").sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources.srcDir 'src/generated/resources'

configurations {
    testCompileClasspath.extendsFrom(compileClasspath)
}

dependencies {
    minecraft libs.neoforge
    compileOnly project(":Common")

    compileOnly libs.autoservice
    annotationProcessor libs.autoservice

    annotationProcessor(variantOf(libs.mixin) { classifier 'processor' })

    implementation(annotationProcessor(libs.mixinextras.common.get()))
    implementation(jarJar(libs.mixinextras.forge.get())) {
        jarJar.ranged(it, "[${libs.versions.mixinextras.get()},)")
    }
}

mixin {
    add project(":Common").sourceSets.main, 'worldgenflexiblifier.refmap.json'
    config 'mixin.worldgenflexiblifier.json'
}

tasks.withType(JavaCompile) {
    source(project(":Common").sourceSets.main.allSource)
}

processResources {
    from project(":Common").sourceSets.main.resources
}

jar.finalizedBy('reobfJar')

jarJar.enable()

reobf {
    jarJar {}
}

tasks.jarJar.finalizedBy("reobfJarJar")

afterEvaluate {
    tasks.jarJar {
        archiveClassifier = ''
    }
    jar {
        archiveClassifier = 'partial'
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId project.group
            artifactId base.archivesName.get()
            version project.version
            artifact tasks.jarJar
            artifact sourcesJar
            artifact javadocJar
        }
    }

    repositories {
    }
}